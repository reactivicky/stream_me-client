/* 8a29771e71d02ed7e9985b935ee3fd5678c28801
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type EditStreamInput = {
    description?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    addStream: Stream;
    deleteStream: Scalars['Boolean'];
    editStream: Stream;
    login?: Maybe<User>;
    logout: Scalars['Boolean'];
    register: User;
};
export declare type MutationAddStreamArgs = {
    data: StreamInput;
};
export declare type MutationDeleteStreamArgs = {
    streamId: Scalars['Float'];
};
export declare type MutationEditStreamArgs = {
    data: EditStreamInput;
    streamId: Scalars['Float'];
};
export declare type MutationLoginArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type MutationRegisterArgs = {
    data: RegisterInput;
};
export declare type Query = {
    __typename?: 'Query';
    hello: Scalars['String'];
    me?: Maybe<User>;
    stream?: Maybe<Stream>;
    streams: Array<Stream>;
};
export declare type QueryStreamArgs = {
    streamId: Scalars['Float'];
};
export declare type RegisterInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
/** Stream */
export declare type Stream = {
    __typename?: 'Stream';
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['String'];
    user: User;
};
export declare type StreamInput = {
    description?: Maybe<Scalars['String']>;
    title: Scalars['String'];
    url: Scalars['String'];
};
/** User */
export declare type User = {
    __typename?: 'User';
    email: Scalars['String'];
    id: Scalars['ID'];
    streams?: Maybe<Array<Stream>>;
};
export declare type StreamsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type StreamsQuery = ({
    __typename?: 'Query';
} & {
    streams: Array<({
        __typename?: 'Stream';
    } & Pick<Stream, 'id' | 'title' | 'description' | 'url'>)>;
});
export declare const StreamsDocument: Apollo.DocumentNode;
/**
 * __useStreamsQuery__
 *
 * To run a query within a React component, call `useStreamsQuery` and pass it any options that fit your needs.
 * When your component renders, `useStreamsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStreamsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useStreamsQuery(baseOptions?: Apollo.QueryHookOptions<StreamsQuery, StreamsQueryVariables>): Apollo.QueryResult<StreamsQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useStreamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StreamsQuery, StreamsQueryVariables>): Apollo.QueryTuple<StreamsQuery, Exact<{
    [key: string]: never;
}>>;
export declare type StreamsQueryHookResult = ReturnType<typeof useStreamsQuery>;
export declare type StreamsLazyQueryHookResult = ReturnType<typeof useStreamsLazyQuery>;
export declare type StreamsQueryResult = Apollo.QueryResult<StreamsQuery, StreamsQueryVariables>;
