/* dfeb2bc202dba139c2b187713942e7f465155d75
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type EditStreamInput = {
    description?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    addStream: Stream;
    deleteStream: Scalars['Boolean'];
    editStream: Stream;
    login?: Maybe<User>;
    logout: Scalars['Boolean'];
    register: User;
};
export declare type MutationAddStreamArgs = {
    data: StreamInput;
};
export declare type MutationDeleteStreamArgs = {
    streamId: Scalars['Float'];
};
export declare type MutationEditStreamArgs = {
    data: EditStreamInput;
    streamId: Scalars['Float'];
};
export declare type MutationLoginArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type MutationRegisterArgs = {
    data: RegisterInput;
};
export declare type Query = {
    __typename?: 'Query';
    hello: Scalars['String'];
    me?: Maybe<User>;
    stream?: Maybe<Stream>;
    streams: Array<Stream>;
};
export declare type QueryStreamArgs = {
    streamId: Scalars['Float'];
};
export declare type RegisterInput = {
    email: Scalars['String'];
    password: Scalars['String'];
};
/** Stream */
export declare type Stream = {
    __typename?: 'Stream';
    description?: Maybe<Scalars['String']>;
    id: Scalars['ID'];
    title: Scalars['String'];
    url: Scalars['String'];
    user: User;
};
export declare type StreamInput = {
    description?: Maybe<Scalars['String']>;
    title: Scalars['String'];
    url: Scalars['String'];
};
/** User */
export declare type User = {
    __typename?: 'User';
    email: Scalars['String'];
    id: Scalars['ID'];
    streams?: Maybe<Array<Stream>>;
};
export declare type DeleteStreamMutationVariables = Exact<{
    streamId: Scalars['Float'];
}>;
export declare type DeleteStreamMutation = ({
    __typename?: 'Mutation';
} & Pick<Mutation, 'deleteStream'>);
export declare const DeleteStreamDocument: Apollo.DocumentNode;
export declare type DeleteStreamMutationFn = Apollo.MutationFunction<DeleteStreamMutation, DeleteStreamMutationVariables>;
/**
 * __useDeleteStreamMutation__
 *
 * To run a mutation, you first call `useDeleteStreamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStreamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStreamMutation, { data, loading, error }] = useDeleteStreamMutation({
 *   variables: {
 *      streamId: // value for 'streamId'
 *   },
 * });
 */
export declare function useDeleteStreamMutation(baseOptions?: Apollo.MutationHookOptions<DeleteStreamMutation, DeleteStreamMutationVariables>): Apollo.MutationTuple<DeleteStreamMutation, Exact<{
    streamId: number;
}>>;
export declare type DeleteStreamMutationHookResult = ReturnType<typeof useDeleteStreamMutation>;
export declare type DeleteStreamMutationResult = Apollo.MutationResult<DeleteStreamMutation>;
export declare type DeleteStreamMutationOptions = Apollo.BaseMutationOptions<DeleteStreamMutation, DeleteStreamMutationVariables>;
